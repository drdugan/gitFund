

$ git log --graph --oneline --all --decorate  //shows all commits with graph, commit message, and tags
$ git config --global alias.detailedLog "log --graph --oneline --decorate" //makes a nickname for that command

//alias
$ git config --global alias.goodlog "log --all --oneline --graph" //give specific commands an alias

//branchgit
$git branch feature1 //branches from the current commit
$git branch fix1 [sha number] //will branch at the commit associated with the specified sha number

$git checkout feature1 //check it out from the repo to work on it.

//i added a file called feature1.txt when I commit the file the feature one branch moves up to the next commit
//So does HEAD
//because the change was made on that branch.
//branches will follow commits like a branch growing
//tags stay in place and are just a bookmark to a commit.

//checkout a branch
$git checkout [branch name]

//now that the change is on that branch if I switch back to the origin branch and do a git log
//HEAD will be back down at the previous commit before the branch and won't include the change made in feature1 branch

//rename a branch
$git branch -m oldname newname //rename a branch with the move argument.

//delete a branch

$ git branch -d feature1

//if a branch hasn't been merged git will stop you from doing this with this error message:
  error: The branch 'feature1' is not fully merged.
  If you are sure you want to delete it, run 'git branch -D feature1'.

//force a delete
$git branch -D feature1

//UNDELETE
//log of everywhere head had pointed
$git reflog
//find the branch you deleted and make a branch to the sha number

//git stash
//hide branches and files from the staging area
$git stash //stashes the current branch so that you can push other changes
$git stash apply // brings the stashed branch back to current working area
$git stash pop // does the same as above but deletes from the list
$git stash dump // gets rid of the stash(latest)
$git stash list //list of different stashed branches
